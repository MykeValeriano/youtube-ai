import os
import json
import re
import google.generativeai as genai
from utils.youtube_agent import get_transcript_from_youtube

# Configure Gemini Pro
#genai.configure(api_key=os.getenv("GOOGLE_API_KEY"))
#model = genai.GenerativeModel("gemini-pro")
genai.configure(api_key="AIzaSyBcRtLFcwuHt2cMN_1Qf9G0xn48w1usn4Y")
model = genai.GenerativeModel("gemini-2.5-pro")

def generate_quiz(source: str, count: int = 5, output_file: str = "public/quiz.json") -> list:
    """
    Generate an English quiz based on a YouTube URL or transcript and return quiz data as a list. Optionally saves to JSON file.

    Args:
        source: YouTube URL or transcript string
        count: Number of questions to generate
        output_file: JSON file path to save quiz

    Returns:
        List of quiz questions (dicts)
    """
    # Get transcript
    if source.startswith("http"):
        transcript = get_transcript_from_youtube(source)
    else:
        transcript = source

    # Prompt Gemini to generate quiz ONLY in English, JSON format
    prompt = (
        f"Create a quiz of {count} questions based on the transcript below.\n"
        "Please write ALL questions, options, and answers in ENGLISH only.\n\n"
        "Use ONLY JSON format as a list of questions, like this:\n"
        "[\n"
        "  {\n"
        "    \"type\": \"open|multiple|yesno\",\n"
        "    \"question\": \"...\",\n"
        "    \"options\": [\"opt1\", \"opt2\"],   # only for multiple choice\n"
        "    \"answer\": \"...\"\n"
        "  },\n"
        "  ...\n"
        "]\n\n"
        f"Transcript:\n{transcript}"
    )

    # Generate content
    response = model.generate_content(prompt)

    # Debug output
    print("Gemini raw response:")
    print(response.text)

    # Extract JSON safely
    def extract_json(text):
        try:
            return json.loads(text)
        except json.JSONDecodeError:
            match = re.search(r"\[\s*{.*}\s*\]", text, re.DOTALL)
            if match:
                return json.loads(match.group(0))
        return []

    quiz_data = extract_json(response.text)
    if output_file:
        import json
        with open(output_file, "w", encoding="utf-8") as f:
            json.dump({"quiz": quiz_data}, f, ensure_ascii=False, indent=2)
    return quiz_data

def rate_quiz(quiz: list, user_answers: list) -> dict:
    """
    Rates the user's answers against the quiz and returns a score and feedback for each question.
    Args:
        quiz: List of quiz question dicts (as generated by generate_quiz)
        user_answers: List of user's answers (same order as quiz)
    Returns:
        A dict with total score, per-question feedback, and correct answers.
    """
    results = []
    score = 0
    for i, (q, user_ans) in enumerate(zip(quiz, user_answers)):
        correct = False
        feedback = ""
        if q["type"] == "multiple":
            correct = user_ans.strip().lower() == q["answer"].strip().lower()
        elif q["type"] == "yesno":
            correct = user_ans.strip().lower() == q["answer"].strip().lower()
        else:  # open
            # Accept if answer matches or is contained (case-insensitive)
            correct = q["answer"].strip().lower() in user_ans.strip().lower() or user_ans.strip().lower() in q["answer"].strip().lower()
        if correct:
            score += 1
            feedback = "✅ Correct"
        else:
            feedback = f"❌ Incorrect. Correct: {q['answer']}"
        results.append({
            "question": q["question"],
            "your_answer": user_ans,
            "correct_answer": q["answer"],
            "result": feedback
        })
    return {
        "score": score,
        "total": len(quiz),
        "results": results
    }
